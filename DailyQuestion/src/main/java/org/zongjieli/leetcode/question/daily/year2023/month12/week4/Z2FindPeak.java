package org.zongjieli.leetcode.question.daily.year2023.month12.week4;

import java.util.Arrays;

/**
 * 一个 2D 网格中的峰值是指那些严格大于其相邻格子(上、下、左、右)的元素
 * 给定一个 从 0 开始编号 的 m x n 矩阵 mat
 * 其中任意两个相邻格子的值都不相同
 * 找出任意一个峰值 mat[i][j] 并返回其位置 [i,j]
 * 可以假设整个矩阵周边环绕着一圈值为 -1 的格子
 * 要求必须写出时间复杂度为 O(m log(n)) 或 O(n log(m)) 的算法
 *
 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n <= 500
 * 1 <= mat[i][j] <= 10^5
 * 任意两个相邻元素均不相等
 *
 * @author Li.zongjie
 * @version 1.0
 * @date 2023/12/19
 */
public class Z2FindPeak {

    private int[][] values;

    private int m, n;

    public int[] findPeakGrid(int[][] mat) {
        values = mat;
        m = mat.length;
        n = mat[0].length;
        int[] row = mat[0];
        int ri = 0, left = 0, right = n - 1, middle = (left + right) / 2;
        int lv = row[left], rv = row[right], mv = row[middle];
        int ml, mr, nmv;
        while (true) {
            ml = Math.max(lv, getValue(ri, middle - 1));
            mr = Math.max(rv, getValue(ri, middle + 1));
            if (mv >= ml && mv >= mr) {
                if (mv > (nmv = getValue(ri - 1, middle))) {
                    if (mv > (nmv = getValue(ri + 1, middle))) {
                        return new int[]{ri, middle};
                    } else {
                        row = mat[++ri];
                    }
                } else {
                    row = mat[--ri];
                }
                mv = nmv;
                lv = row[left = 0];
                rv = row[right = n - 1];
            } else {
                if (ml >= mr) {
                    rv = row[right = middle - 1];
                } else {
                    lv = row[left = middle + 1];
                }
                mv = row[middle = (left + right) / 2];
            }
        }
    }

    private int getValue(int i, int j) {
        return i < 0 || i >= m || j < 0 || j >= n ? -1 : values[i][j];
    }
    public static void main(String[] args) {
        Z2FindPeak test = new Z2FindPeak();
        System.out.println(Arrays.toString(test.findPeakGrid(new int[][]{{72, 85, 92, 63, 20, 25, 38, 28, 8, 75, 95, 70, 8, 96, 41, 8, 7, 75, 62, 65, 68, 21, 8, 66, 11}, {24, 9, 77, 9, 87, 31, 52, 16, 73, 32, 75, 77, 6, 80, 11, 54, 85, 73, 67, 41, 34, 27, 86, 92, 41}, {31, 34, 51, 17, 86, 83, 39, 59, 41, 97, 10, 2, 59, 73, 13, 10, 69, 28, 65, 34, 17, 45, 9, 32, 48}, {37, 21, 57, 70, 91, 39, 79, 84, 68, 2, 86, 71, 39, 85, 14, 18, 34, 15, 14, 96, 71, 20, 35, 37, 78}, {27, 92, 44, 27, 88, 82, 34, 65, 63, 33, 7, 12, 82, 55, 36, 6, 1, 43, 99, 17, 82, 34, 21, 95, 57}, {71, 91, 55, 72, 2, 15, 10, 89, 20, 70, 5, 48, 75, 71, 19, 56, 17, 6, 40, 47, 6, 46, 27, 88, 32}, {86, 14, 46, 100, 72, 53, 80, 96, 31, 21, 23, 53, 4, 23, 95, 43, 53, 86, 95, 32, 35, 21, 90, 14, 49}, {5, 61, 29, 26, 59, 45, 40, 30, 29, 4, 85, 25, 52, 43, 36, 9, 99, 36, 45, 83, 66, 52, 87, 69, 43}, {4, 15, 34, 23, 75, 34, 5, 14, 77, 56, 45, 94, 41, 56, 78, 66, 15, 50, 74, 25, 33, 6, 91, 56, 1}, {67, 69, 88, 93, 95, 86, 26, 47, 56, 9, 86, 43, 80, 41, 85, 16, 93, 39, 65, 40, 86, 53, 42, 52, 90}, {38, 71, 17, 25, 54, 49, 87, 96, 23, 79, 73, 39, 52, 71, 1, 39, 37, 27, 56, 75, 78, 84, 60, 57, 87}, {28, 66, 61, 95, 22, 85, 11, 37, 66, 85, 82, 80, 43, 12, 97, 31, 87, 40, 29, 26, 19, 4, 6, 32, 61}, {79, 99, 10, 59, 54, 81, 74, 25, 92, 90, 50, 64, 52, 32, 19, 84, 89, 1, 97, 99, 14, 100, 55, 29, 23}, {90, 67, 60, 7, 72, 32, 16, 59, 18, 60, 86, 68, 72, 77, 41, 97, 57, 79, 93, 65, 55, 71, 58, 21, 96}, {61, 58, 34, 97, 32, 82, 36, 99, 100, 67, 63, 81, 31, 36, 57, 10, 92, 37, 31, 35, 43, 41, 70, 11, 18}, {20, 30, 50, 89, 20, 91, 28, 9, 54, 53, 43, 70, 60, 54, 8, 27, 54, 50, 99, 75, 90, 3, 98, 74, 49}, {62, 1, 46, 39, 97, 50, 54, 69, 96, 95, 70, 78, 29, 63, 29, 35, 56, 63, 4, 50, 44, 86, 87, 52, 93}, {22, 60, 17, 80, 69, 4, 51, 76, 73, 85, 4, 11, 83, 55, 18, 60, 24, 7, 34, 49, 42, 28, 59, 42, 44}, {98, 49, 36, 97, 54, 33, 11, 61, 3, 96, 70, 7, 45, 29, 84, 9, 100, 84, 6, 97, 4, 32, 26, 3, 80}, {20, 31, 17, 61, 86, 15, 73, 28, 60, 90, 33, 99, 48, 22, 78, 96, 92, 15, 100, 21, 40, 14, 75, 4, 40}, {74, 87, 49, 51, 92, 26, 10, 76, 89, 81, 32, 14, 90, 99, 39, 88, 77, 16, 73, 6, 45, 69, 55, 85, 48}, {9, 65, 83, 44, 2, 54, 63, 14, 56, 47, 82, 59, 91, 20, 56, 23, 94, 67, 84, 35, 79, 100, 62, 60, 56}, {94, 76, 35, 42, 32, 12, 36, 58, 32, 97, 60, 73, 79, 86, 49, 44, 4, 64, 42, 24, 63, 28, 46, 34, 44}, {36, 77, 90, 36, 72, 2, 67, 25, 11, 31, 93, 53, 63, 72, 98, 31, 89, 61, 83, 92, 58, 3, 12, 38, 29}})));
        System.out.println(Arrays.toString(test.findPeakGrid(new int[][]{{49, 58, 49, 11, 88, 85, 70, 18, 84, 45, 16, 23, 69}, {51, 68, 17, 94, 29, 1, 97, 3, 39, 60, 87, 93, 70}, {55, 69, 49, 30, 32, 59, 45, 20, 36, 25, 93, 98, 15}, {5, 85, 54, 79, 99, 3, 31, 27, 9, 13, 77, 5, 58}, {77, 87, 91, 7, 32, 95, 6, 52, 57, 30, 70, 28, 97}, {100, 8, 18, 65, 38, 30, 94, 74, 41, 74, 77, 99, 87}, {42, 31, 39, 19, 85, 67, 29, 53, 39, 36, 8, 72, 76}, {95, 23, 81, 87, 55, 72, 64, 7, 45, 83, 86, 49, 68}, {41, 90, 54, 53, 20, 39, 49, 24, 97, 69, 61, 31, 29}, {39, 91, 19, 60, 8, 72, 53, 54, 72, 68, 18, 50, 32}, {33, 27, 43, 83, 11, 58, 48, 12, 69, 93, 25, 7, 35}, {49, 87, 78, 6, 10, 25, 98, 76, 93, 86, 72, 28, 62}, {27, 43, 39, 2, 28, 95, 16, 96, 97, 62, 32, 90, 78}, {91, 27, 51, 31, 71, 42, 100, 37, 49, 60, 69, 84, 46}, {40, 34, 47, 66, 64, 60, 13, 93, 61, 98, 41, 27, 48}})));
        System.out.println(Arrays.toString(test.findPeakGrid(new int[][]{{10, 20, 40, 50, 60, 70}, {1, 4, 2, 3, 500, 80}})));
    }
}
