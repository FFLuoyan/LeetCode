package org.zongjieli.leetcode.question.daily.year2022.month11.week4;

import java.util.Arrays;

/**
 * 在一家生产小球的玩具厂工作,有 n 个小球,编号从 lowLimit 开始,到 highLimit 结束
 * 包括 lowLimit 和 highLimit,即 n == highLimit - lowLimit + 1
 * 另有无限数量的盒子,编号从 1 到 infinity
 * 将每个小球放入盒子中,其中盒子的编号应当等于小球编号上每位数字的和
 * 例如,编号 321 的小球应当放入编号 3 + 2 + 1 = 6 的盒子
 * 而编号 10 的小球应当放入编号 1 + 0 = 1 的盒子
 * 给定两个整数 lowLimit 和 highLimit,返回放有最多小球的盒子中的小球数量
 * 如果有多个盒子都满足放有最多小球,只需返回其中任一盒子的小球数量
 *
 * 1 <= lowLimit <= highLimit <= 10^5
 *
 * @author Li.zongjie
 * @version 1.0
 * @date 2023/1/13
 */
public class Z3MaxCountBall {

    // 从 0 开始至 (9, 19, 29, ..., 89),(99, 199, 299, ..., 999), ..., (99999, 199999, ..., 999999) 各个盒子内共有多少个数
    int[][][] count = new int[][][]{
            {
                {1}
                , {1, 1}
                , {1, 1, 1}
                , {1, 1, 1, 1}
                , {1, 1, 1, 1, 1}
                , {1, 1, 1, 1, 1, 1}
                , {1, 1, 1, 1, 1, 1, 1}
                , {1, 1, 1, 1, 1, 1, 1, 1}
                , {1, 1, 1, 1, 1, 1, 1, 1, 1}
            }, {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
                , {1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1}
                , {1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1}
                , {1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1}
                , {1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 4, 3, 2, 1}
                , {1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 5, 4, 3, 2, 1}
                , {1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 6, 5, 4, 3, 2, 1}
                , {1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 7, 6, 5, 4, 3, 2, 1}
                , {1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1}
            }, {
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
                , {1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1}
                , {1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 28, 27, 24, 21, 18, 15, 12, 9, 6, 3, 1}
                , {1, 3, 6, 10, 14, 18, 22, 26, 30, 34, 36, 36, 34, 30, 26, 22, 18, 14, 10, 6, 3, 1}
                , {1, 3, 6, 10, 15, 20, 25, 30, 35, 40, 43, 44, 43, 40, 35, 30, 25, 20, 15, 10, 6, 3, 1}
                , {1, 3, 6, 10, 15, 21, 27, 33, 39, 45, 49, 51, 51, 49, 45, 39, 33, 27, 21, 15, 10, 6, 3, 1}
                , {1, 3, 6, 10, 15, 21, 28, 35, 42, 49, 54, 57, 58, 57, 54, 49, 42, 35, 28, 21, 15, 10, 6, 3, 1}
                , {1, 3, 6, 10, 15, 21, 28, 36, 44, 52, 58, 62, 64, 64, 62, 58, 52, 44, 36, 28, 21, 15, 10, 6, 3, 1}
                , {1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 61, 66, 69, 70, 69, 66, 61, 54, 45, 36, 28, 21, 15, 10, 6, 3, 1}
            }, {
                {1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 63, 69, 73, 75, 75, 73, 69, 63, 55, 45, 36, 28, 21, 15, 10, 6, 3, 1}
                , {1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 118, 132, 142, 148, 150, 148, 142, 132, 118, 100, 81, 64, 49, 36, 25, 16, 9, 4, 1}
                , {1, 4, 10, 19, 31, 46, 64, 85, 109, 136, 163, 187, 205, 217, 223, 223, 217, 205, 187, 163, 136, 109, 85, 64, 46, 31, 19, 10, 4, 1}
                , {1, 4, 10, 20, 34, 52, 74, 100, 130, 164, 199, 232, 260, 280, 292, 296, 292, 280, 260, 232, 199, 164, 130, 100, 74, 52, 34, 20, 10, 4, 1}
                , {1, 4, 10, 20, 35, 55, 80, 110, 145, 185, 227, 268, 305, 335, 355, 365, 365, 355, 335, 305, 268, 227, 185, 145, 110, 80, 55, 35, 20, 10, 4, 1}
                , {1, 4, 10, 20, 35, 56, 83, 116, 155, 200, 248, 296, 341, 380, 410, 428, 434, 428, 410, 380, 341, 296, 248, 200, 155, 116, 83, 56, 35, 20, 10, 4, 1}
                , {1, 4, 10, 20, 35, 56, 84, 119, 161, 210, 263, 317, 369, 416, 455, 483, 497, 497, 483, 455, 416, 369, 317, 263, 210, 161, 119, 84, 56, 35, 20, 10, 4, 1}
                , {1, 4, 10, 20, 35, 56, 84, 120, 164, 216, 273, 332, 390, 444, 491, 528, 552, 560, 552, 528, 491, 444, 390, 332, 273, 216, 164, 120, 84, 56, 35, 20, 10, 4, 1}
                , {1, 4, 10, 20, 35, 56, 84, 120, 165, 219, 279, 342, 405, 465, 519, 564, 597, 615, 615, 597, 564, 519, 465, 405, 342, 279, 219, 165, 120, 84, 56, 35, 20, 10, 4, 1}
            }, {
                {1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 282, 348, 415, 480, 540, 592, 633, 660, 670, 660, 633, 592, 540, 480, 415, 348, 282, 220, 165, 120, 84, 56, 35, 20, 10, 4, 1}
                , {1, 5, 14, 30, 55, 91, 140, 204, 285, 385, 502, 630, 763, 895, 1020, 1132, 1225, 1293, 1330, 1330, 1293, 1225, 1132, 1020, 895, 763, 630, 502, 385, 285, 204, 140, 91, 55, 30, 14, 5, 1}
                , {1, 5, 15, 34, 65, 111, 175, 260, 369, 505, 667, 850, 1045, 1243, 1435, 1612, 1765, 1885, 1963, 1990, 1963, 1885, 1765, 1612, 1435, 1243, 1045, 850, 667, 505, 369, 260, 175, 111, 65, 34, 15, 5, 1}
                , {1, 5, 15, 35, 69, 121, 195, 295, 425, 589, 787, 1015, 1265, 1525, 1783, 2027, 2245, 2425, 2555, 2623, 2623, 2555, 2425, 2245, 2027, 1783, 1525, 1265, 1015, 787, 589, 425, 295, 195, 121, 69, 35, 15, 5, 1}
                , {1, 5, 15, 35, 70, 125, 205, 315, 460, 645, 871, 1135, 1430, 1745, 2065, 2375, 2660, 2905, 3095, 3215, 3256, 3215, 3095, 2905, 2660, 2375, 2065, 1745, 1430, 1135, 871, 645, 460, 315, 205, 125, 70, 35, 15, 5, 1}
                , {1, 5, 15, 35, 70, 126, 209, 325, 480, 680, 927, 1219, 1550, 1910, 2285, 2657, 3008, 3320, 3575, 3755, 3848, 3848, 3755, 3575, 3320, 3008, 2657, 2285, 1910, 1550, 1219, 927, 680, 480, 325, 209, 126, 70, 35, 15, 5, 1}
                , {1, 5, 15, 35, 70, 126, 210, 329, 490, 700, 962, 1275, 1634, 2030, 2450, 2877, 3290, 3668, 3990, 4235, 4388, 4440, 4388, 4235, 3990, 3668, 3290, 2877, 2450, 2030, 1634, 1275, 962, 700, 490, 329, 210, 126, 70, 35, 15, 5, 1}
                , {1, 5, 15, 35, 70, 126, 210, 330, 494, 710, 982, 1310, 1690, 2114, 2570, 3042, 3510, 3950, 4338, 4650, 4868, 4980, 4980, 4868, 4650, 4338, 3950, 3510, 3042, 2570, 2114, 1690, 1310, 982, 710, 494, 330, 210, 126, 70, 35, 15, 5, 1}
                , {1, 5, 15, 35, 70, 126, 210, 330, 495, 714, 992, 1330, 1725, 2170, 2654, 3162, 3675, 4170, 4620, 4998, 5283, 5460, 5520, 5460, 5283, 4998, 4620, 4170, 3675, 3162, 2654, 2170, 1725, 1330, 992, 714, 495, 330, 210, 126, 70, 35, 15, 5, 1}
            }, {
                {1, 5, 15, 35, 70, 126, 210, 330, 495, 715, 996, 1340, 1745, 2205, 2710, 3246, 3795, 4335, 4840, 5280, 5631, 5875, 6000, 6000, 5875, 5631, 5280, 4840, 4335, 3795, 3246, 2710, 2205, 1745, 1340, 996, 715, 495, 330, 210, 126, 70, 35, 15, 5, 1}
            }};

    public int countBalls(int lowLimit, int highLimit) {
        int[] high = getBallNumber(highLimit);
        int[] low = getBallNumber(lowLimit - 1);
        int result = 0;
        for (int i = 0; i < low.length; i++) {
            result = Math.max(result, high[i] - low[i]);
        }
        return result;
    }

    private int[] getBallNumber(int max) {
        int[] result = new int[50];
        int[] value = new int[6];
        int i = 0;
        while (max > 0) {
            value[i++] = max % 10;
            max /= 10;
        }
        int before = 0;
        while (--i > 0) {
            if (value[i] > 0) {
                int[] base = count[i][value[i] - 1];
                for (int j = 0; j < base.length; j++) {
                    result[j + before] += base[j];
                }
            }
            before += value[i];
        }
        for (int j = 0 ; j <= value[0] ; j++) {
            result[before + j]++;
        }
        return result;
    }

    public static void main(String[] args) {
        Z3MaxCountBall test = new Z3MaxCountBall();
        // 2
        System.out.println(test.countBalls(19, 28));
        // 32
        System.out.println(test.countBalls(220, 548));
    }

}
