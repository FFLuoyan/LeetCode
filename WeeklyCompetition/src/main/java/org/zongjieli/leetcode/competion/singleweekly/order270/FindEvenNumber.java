package org.zongjieli.leetcode.competion.singleweekly.order270;

import java.util.Arrays;

/**
 * 给定一个整数数组 digits,其中每个元素是一个数字(0 - 9),数组中可能存在重复元素
 * 需要找出所有满足下述条件且互不相同的整数
 *  该整数由 digits 中的三个元素按任意顺序依次连接组成
 *  该整数不含前导零
 *  该整数是一个偶数
 * 例如,给定的 digits 是 [1, 2, 3]
 * 整数 132 和 312 满足上面列出的全部条件
 * 将找出的所有互不相同的整数按递增顺序排列,并以数组形式返回
 *
 * 3 <= digits.length <= 100
 * 0 <= digits[i] <= 9
 *
 * @author   Li.zongjie
 * @date     2021/12/5
 * @version  1.0
 */
public class FindEvenNumber {

    private int[] number = new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 73, 0, 4105, 0, 262153, 0, 16777225, 0, 17, 0, 80, 0, 4112, 0, 262160, 0, 16777232, 0, 73, 0, 136, 0, 4168, 0, 262216, 0, 16777288, 0, 521, 0, 584, 0, 4616, 0, 262664, 0, 16777736, 0, 4105, 0, 4168, 0, 8200, 0, 266248, 0, 16781320, 0, 32777, 0, 32840, 0, 36872, 0, 294920, 0, 16809992, 0, 262153, 0, 262216, 0, 266248, 0, 524296, 0, 17039368, 0, 2097161, 0, 2097224, 0, 2101256, 0, 2359304, 0, 18874376, 0, 16777225, 0, 16777288, 0, 16781320, 0, 17039368, 0, 33554440, 0, 134217737, 0, 134217800, 0, 134221832, 0, 134479880, 0, 150994952, 0, 66, 0, 129, 0, 4161, 0, 262209, 0, 16777281, 0, 73, 0, 136, 0, 4168, 0, 262216, 0, 16777288, 0, 129, 0, 192, 0, 4224, 0, 262272, 0, 16777344, 0, 577, 0, 640, 0, 4672, 0, 262720, 0, 16777792, 0, 4161, 0, 4224, 0, 8256, 0, 266304, 0, 16781376, 0, 32833, 0, 32896, 0, 36928, 0, 294976, 0, 16810048, 0, 262209, 0, 262272, 0, 266304, 0, 524352, 0, 17039424, 0, 2097217, 0, 2097280, 0, 2101312, 0, 2359360, 0, 18874432, 0, 16777281, 0, 16777344, 0, 16781376, 0, 17039424, 0, 33554496, 0, 134217793, 0, 134217856, 0, 134221888, 0, 134479936, 0, 150995008, 0, 514, 0, 577, 0, 4609, 0, 262657, 0, 16777729, 0, 521, 0, 584, 0, 4616, 0, 262664, 0, 16777736, 0, 577, 0, 640, 0, 4672, 0, 262720, 0, 16777792, 0, 1025, 0, 1088, 0, 5120, 0, 263168, 0, 16778240, 0, 4609, 0, 4672, 0, 8704, 0, 266752, 0, 16781824, 0, 33281, 0, 33344, 0, 37376, 0, 295424, 0, 16810496, 0, 262657, 0, 262720, 0, 266752, 0, 524800, 0, 17039872, 0, 2097665, 0, 2097728, 0, 2101760, 0, 2359808, 0, 18874880, 0, 16777729, 0, 16777792, 0, 16781824, 0, 17039872, 0, 33554944, 0, 134218241, 0, 134218304, 0, 134222336, 0, 134480384, 0, 150995456, 0, 4098, 0, 4161, 0, 8193, 0, 266241, 0, 16781313, 0, 4105, 0, 4168, 0, 8200, 0, 266248, 0, 16781320, 0, 4161, 0, 4224, 0, 8256, 0, 266304, 0, 16781376, 0, 4609, 0, 4672, 0, 8704, 0, 266752, 0, 16781824, 0, 8193, 0, 8256, 0, 12288, 0, 270336, 0, 16785408, 0, 36865, 0, 36928, 0, 40960, 0, 299008, 0, 16814080, 0, 266241, 0, 266304, 0, 270336, 0, 528384, 0, 17043456, 0, 2101249, 0, 2101312, 0, 2105344, 0, 2363392, 0, 18878464, 0, 16781313, 0, 16781376, 0, 16785408, 0, 17043456, 0, 33558528, 0, 134221825, 0, 134221888, 0, 134225920, 0, 134483968, 0, 150999040, 0, 32770, 0, 32833, 0, 36865, 0, 294913, 0, 16809985, 0, 32777, 0, 32840, 0, 36872, 0, 294920, 0, 16809992, 0, 32833, 0, 32896, 0, 36928, 0, 294976, 0, 16810048, 0, 33281, 0, 33344, 0, 37376, 0, 295424, 0, 16810496, 0, 36865, 0, 36928, 0, 40960, 0, 299008, 0, 16814080, 0, 65537, 0, 65600, 0, 69632, 0, 327680, 0, 16842752, 0, 294913, 0, 294976, 0, 299008, 0, 557056, 0, 17072128, 0, 2129921, 0, 2129984, 0, 2134016, 0, 2392064, 0, 18907136, 0, 16809985, 0, 16810048, 0, 16814080, 0, 17072128, 0, 33587200, 0, 134250497, 0, 134250560, 0, 134254592, 0, 134512640, 0, 151027712, 0, 262146, 0, 262209, 0, 266241, 0, 524289, 0, 17039361, 0, 262153, 0, 262216, 0, 266248, 0, 524296, 0, 17039368, 0, 262209, 0, 262272, 0, 266304, 0, 524352, 0, 17039424, 0, 262657, 0, 262720, 0, 266752, 0, 524800, 0, 17039872, 0, 266241, 0, 266304, 0, 270336, 0, 528384, 0, 17043456, 0, 294913, 0, 294976, 0, 299008, 0, 557056, 0, 17072128, 0, 524289, 0, 524352, 0, 528384, 0, 786432, 0, 17301504, 0, 2359297, 0, 2359360, 0, 2363392, 0, 2621440, 0, 19136512, 0, 17039361, 0, 17039424, 0, 17043456, 0, 17301504, 0, 33816576, 0, 134479873, 0, 134479936, 0, 134483968, 0, 134742016, 0, 151257088, 0, 2097154, 0, 2097217, 0, 2101249, 0, 2359297, 0, 18874369, 0, 2097161, 0, 2097224, 0, 2101256, 0, 2359304, 0, 18874376, 0, 2097217, 0, 2097280, 0, 2101312, 0, 2359360, 0, 18874432, 0, 2097665, 0, 2097728, 0, 2101760, 0, 2359808, 0, 18874880, 0, 2101249, 0, 2101312, 0, 2105344, 0, 2363392, 0, 18878464, 0, 2129921, 0, 2129984, 0, 2134016, 0, 2392064, 0, 18907136, 0, 2359297, 0, 2359360, 0, 2363392, 0, 2621440, 0, 19136512, 0, 4194305, 0, 4194368, 0, 4198400, 0, 4456448, 0, 20971520, 0, 18874369, 0, 18874432, 0, 18878464, 0, 19136512, 0, 35651584, 0, 136314881, 0, 136314944, 0, 136318976, 0, 136577024, 0, 153092096, 0, 16777218, 0, 16777281, 0, 16781313, 0, 17039361, 0, 33554433, 0, 16777225, 0, 16777288, 0, 16781320, 0, 17039368, 0, 33554440, 0, 16777281, 0, 16777344, 0, 16781376, 0, 17039424, 0, 33554496, 0, 16777729, 0, 16777792, 0, 16781824, 0, 17039872, 0, 33554944, 0, 16781313, 0, 16781376, 0, 16785408, 0, 17043456, 0, 33558528, 0, 16809985, 0, 16810048, 0, 16814080, 0, 17072128, 0, 33587200, 0, 17039361, 0, 17039424, 0, 17043456, 0, 17301504, 0, 33816576, 0, 18874369, 0, 18874432, 0, 18878464, 0, 19136512, 0, 35651584, 0, 33554433, 0, 33554496, 0, 33558528, 0, 33816576, 0, 50331648, 0, 150994945, 0, 150995008, 0, 150999040, 0, 151257088, 0, 167772160, 0, 134217730, 0, 134217793, 0, 134221825, 0, 134479873, 0, 150994945, 0, 134217737, 0, 134217800, 0, 134221832, 0, 134479880, 0, 150994952, 0, 134217793, 0, 134217856, 0, 134221888, 0, 134479936, 0, 150995008, 0, 134218241, 0, 134218304, 0, 134222336, 0, 134480384, 0, 150995456, 0, 134221825, 0, 134221888, 0, 134225920, 0, 134483968, 0, 150999040, 0, 134250497, 0, 134250560, 0, 134254592, 0, 134512640, 0, 151027712, 0, 134479873, 0, 134479936, 0, 134483968, 0, 134742016, 0, 151257088, 0, 136314881, 0, 136314944, 0, 136318976, 0, 136577024, 0, 153092096, 0, 150994945, 0, 150995008, 0, 150999040, 0, 151257088, 0, 167772160, 0, 268435457, 0, 268435520, 0, 268439552, 0, 268697600, 0, 285212672};

    public int[] findEvenNumbers(int[] digits) {
        int compare = 613566756;
        int count = 0;
        int[] digitsSave = new int[10];
        for (int digit : digits) {
            digitsSave[digit]++;
        }
        for (int i = 9 ; i >= 0 ; i--){
            count = (count << 3) + 4 + Math.min(digitsSave[i], 3);
        }
        int[] save = new int[1000];
        int index = 0;
        for (int i = 100 ; i < 999 ; i += 2){
            if (((count - number[i]) & compare) == compare){
                save[index++] = i;
            }
        }
        int[] result = new int[index];
        System.arraycopy(save, 0, result, 0, index);
        return result;
    }

    public static void main(String[] args) {
        FindEvenNumber test = new FindEvenNumber();
        System.out.println(Arrays.toString(test.findEvenNumbers(new int[]{2, 1, 3, 0})));
    }
}
